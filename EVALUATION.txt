
Test-1
_______________________________________________________________________

/* find min and max among 3 numbers 
*/
extern void println(int n);

void main(void) 
{
  int i, j, k, min, max;
  i=49;
  j=3;
  k=88;
  min = i;
  max = i;

  if(min >j) 
  {
    min = j;
  }
  else
  {
    max = j;
  }

  if(min >k)
  {
    min = k;
  }
  if(max<k) 
  {
    max = k;
  }

  println(min);
  println(max);
}



Using Chaitin's algorithm 
for spilling a node.
-----------------------									         
				#instructions 	  #reads    #writes	exe_time  	opt_time	 
                                ___________________________________________(ms)___________(ms)_______
	
● Without Optimization			78	     20		14	    8

● -Oregalloc				63	      5		4	    7		   0	

● -Olocal -Oregalloc			68	      5	        4	    8              1

● -Oglobal -Oregalloc			63	      5	        4	    8              1

● -Olocal -Oglobal -Oregalloc		60	      5	        4	    12             4






Using Simple algorithm 
for spilling a node.
-----------------------										                  
				#instructions 	  #reads    #writes	exe_time  	opt_time	 
                                ___________________________________________(ms)___________(ms)_______
	
● -Oregalloc				63	      5		4	    9		   2	

● -Olocal -Oregalloc			68	      5	        4	    9              2

● -Oglobal -Oregalloc			63	      5	        4	    9              2

● -Olocal -Oglobal -Oregalloc		60	      5	        4	    8              0




Benefit: 
-------
#instructions decreased by 23%  using  -Olocal -Oglobal -Oregalloc
load/read decreased by 75%
Store/write decreased by 71%
_______________________________________________________________________
_______________________________________________________________________






Test-2
_______________________________________________________________________
/* find the summation of 2^n for n = 0,1,2,...,n */
int x;

int f(int i)
{
  int y;

  y = 1;
  while (i >= 0) {
    x = x+y;
    y = 2*y;
    i = i-1;
  }

  return x;
}

extern void println (int n);

void main(void)
{
  int a;

  x = 0;
  a = f(7);

  println(a);
}

   
      
Using Chaitin's algorithm 
for spilling a node.
-----------------------	
				#instructions 	  #reads    #writes	exe_time  	opt_time
                                ___________________________________________(ms)___________(ms)____
	
● Without Optimization			318	    102		86	    8

● -Oregalloc				224	     32		23	    8		   0	

● -Olocal -Oregalloc			241	     32	        23	    9              1

● -Oglobal -Oregalloc			224	     32	        23	    9              1

● -Olocal -Oglobal -Oregalloc		207	     32	        23	    8              0






Using Simple algorithm 
for spilling a node.
-----------------------										                  
				#instructions 	  #reads    #writes	exe_time  	opt_time	 
                                ___________________________________________(ms)___________(ms)_______
	
● -Oregalloc				224	     32		23	    8		   0	

● -Olocal -Oregalloc			241	     32	        23	    8              0

● -Oglobal -Oregalloc			224	     32	        23	    7              0

● -Olocal -Oglobal -Oregalloc		207	     32	        23	    8              0



Benefit: 
-------
#instructions decreased by 35% using -Olocal -Oglobal -Oregalloc
load/read decreased by 69%
Store/write decreased by 73%
_______________________________________________________________________
_______________________________________________________________________







Test-3
_______________________________________________________________________
/* find the factorial of n */

extern void println(int x);

int fact(int x) {
    if (x > 0) {
        return x * fact(x-1);
    }
    else {
        return 1;
    }
}

void main(void) {
    int f;

    f = fact(7);

    println(f);
}
    

  
Using Chaitin's algorithm 
for spilling a node.
-----------------------	
				#instructions 	  #reads    #writes	exe_time  	opt_time
                                ___________________________________________(ms)___________(ms)____
	
● Without Optimization			292	     82		67	    7

● -Oregalloc				246	     42		27	    8		   1	

● -Olocal -Oregalloc			253	     42	        27	    8              1

● -Oglobal -Oregalloc			246	     42	        27	    7              0

● -Olocal -Oglobal -Oregalloc		239	     42	        27	    7              0



Benefit: 
-------
#instructions decreased by 18% using -Olocal -Oglobal -Oregalloc
load/read decreased by 49%
Store/write decreased by 60%
_______________________________________________________________________
_______________________________________________________________________








Test-4
_______________________________________________________________________
/* find the n-th number in fibonachchi series
1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, ...
*/
extern void println(int x);

int fibonachchi(int n) {
  int x1, x2, i, temp;
  x1 = 1;
  x2 = 1;

  for(i=0;i<n-2; i= i+1){
    temp = x1 + x2;
    x1 = x2;
    x2 = temp;
  }
  return temp;
}

void main(void) {
    int f;

    f = fibonachchi(15);

    println(f);
}




Using Chaitin's algorithm 
for spilling a node.
-----------------------	
				#instructions 	  #reads    #writes	exe_time  	opt_time
                                ___________________________________________(ms)___________(ms)____
	
● Without Optimization			452	    173		134	    9

● -Oregalloc				260	     20		 6	    8		   0	

● -Olocal -Oregalloc			289	     20		 6	    8		   0

● -Oglobal -Oregalloc			260	     20		 6	    9              1

● -Olocal -Oglobal -Oregalloc		231	     20		 6	    9              1



Benefit: 
-------
#instructions decreased by 49% using -Olocal -Oglobal -Oregalloc
load/read decreased by 88%
Store/write decreased by 96%
_______________________________________________________________________
_______________________________________________________________________







Test-5
_______________________________________________________________________

/* nested while loops */
extern void println (int n);

void main(void)
{
  int a, b, c, d, e, LIM;
  int res;
  a = 0; LIM = 3;
  res = 0;
  
  while (a < LIM) {
    b = 0;
    while (b < LIM) {
      c = 0;
      while (c < LIM) {
	d = 0;
	while (d < LIM) {
	  e = 0;
	  while (e < LIM) {
	    res = res + 1;
	    e = e+1;
	  }
	  d = d+1;
	}
	c = c+1;
      }
      b = b+1;
    }
    a = a+1;
  }
  println(res);
}



Using Chaitin's algorithm 
for spilling a node.
-----------------------	
				#instructions 	  #reads    #writes	exe_time  	opt_time
                                ___________________________________________(ms)___________(ms)____
	
● Without Optimization			7791	   2914		2067	    7

● -Oregalloc				4275	     4		 3	    8		   1	

● -Olocal -Oregalloc			4883	     4		 3	    8		   1

● -Oglobal -Oregalloc			4275	     4		 3	    8		   1

● -Olocal -Oglobal -Oregalloc		3667	     4		 3	    8		   1


Benefit: 
-------
#instructions decreased by 53% using -Olocal -Oglobal -Oregalloc
load/read decreased by 99.86%
Store/write decreased by 99.85%
_______________________________________________________________________
_______________________________________________________________________








***********************************************************************
_______________________________________________________________________

Overall Cost analysis:
---------------------
Optimization along with register allocation takes negligible amount of time. Moreover, it sometimes decreases runtime 
by reducing other operations to do. 


Overall Benefit analysis:
-------------------------
Register allocation decreases loads and stores significantly and also decreases number of operations of a program. There 
is no impact of optimization on decreasing loads and stores. However optimization along with register allocation decreases 
number of operations of a program.


Impact of the different spill strategies:
-----------------------------------------
I have tried a simple algorithm to spill a node: spill the first alive one in the list. The performance observed using this 
algorithm is as same as using Chaitin's algorithm. I think spilling any one node works fine for average cases. May be if we 
use only cost of the nodes to spill that will do better than my simple one, and will show less performance than Chaitin's 
algorithm. But there are some (worst) cases, where my simple algorithm will do bad performance. The improvement 
Of Chaitin's algorithm by Briggs, where the node is sent to the stack instead of spill will do even better performance.









